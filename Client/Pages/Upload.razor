@page "/Upload"
@using System.ComponentModel.DataAnnotations
@using System.IO
@using System.Linq
@using System.Threading
@using BlazorApp.Client.Utils
@using BlazorApp.Shared;
@using Azure.Storage;
@using Azure.Storage.Blobs;
@using Azure.Storage.Blobs.Models
@inject BackendApiRepository Api
@attribute [Authorize()]


<h3>File Upload Component</h3>

<EditForm EditContext="editContext" OnValidSubmit="OnSubmit">
    <DataAnnotationsValidator />

    <div class="form-group">
        Name: <InputText @bind-Value="@person.Name" class="form-control" />
        <ValidationMessage For="() => person.Name" />
    </div>

    <div class="form-group">
        Picture: <InputFile OnChange="OnChange" class="form-control" />
        <ValidationMessage For="() => person.Picture" />

        <div>
            <p>
                Blob: @blobName
            </p>
            <p>
                File: @fileName
            </p>
        </div>
    </div>

    <button>Submit</button>
</EditForm>

@code
{
    // see https://github.com/dotnet/AspNetCore.Docs/blob/master/aspnetcore/blazor/file-uploads/samples/5.x/Components/FileUpload.razor

    private EditContext editContext;
    private Person person;
    private string blobName;
    private string fileName;

    protected override void OnInitialized()
    {
        person = new Person();
        editContext = new EditContext(person);
    }

    private async Task OnChange(InputFileChangeEventArgs eventArgs)
    {
        person.Picture = await eventArgs.File.RequestImageFileAsync("image/png", 1024, 1024);
        editContext.NotifyFieldChanged(FieldIdentifier.Create(() => person.Picture));
    }

    private async Task OnSubmit()
    {
        using var stream = person.Picture.OpenReadStream(maxAllowedSize: 2048000);
        BlobAccessSignature sas = await Api.UploadImage(person.Picture);
        blobName = sas.BlobName;
        fileName = sas.FileName;
    }


    public class Person
    {
        [Required]
        [StringLength(20, MinimumLength = 2)]
        public string Name { get; set; } = "Robert";

        [Required]
        [FileValidation(new[] { ".png", ".jpg" })]
        public IBrowserFile Picture { get; set; }
    }

    private class FileValidationAttribute : ValidationAttribute
    {
        public FileValidationAttribute(string[] allowedExtensions)
        {
            AllowedExtensions = allowedExtensions;
        }

        private string[] AllowedExtensions { get; }

        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            var file = (IBrowserFile)value;

            var extension = System.IO.Path.GetExtension(file.Name);

            if (!AllowedExtensions.Contains(extension, StringComparer.OrdinalIgnoreCase))
            {
                return new ValidationResult($"File must have one of the following extensions: {string.Join(", ", AllowedExtensions)}.", new[] { validationContext.MemberName });
            }

            return ValidationResult.Success;
        }
    }
}